{"version":3,"sources":["../../src/components/form/subject.ts","../../src/components/form/context.tsx","../../src/components/form/provider.tsx","../../src/components/form/index.tsx","../../src/components/form/fields.ts","../../src/hooks/use-errors.ts","../../src/hooks/use-form.ts","login.fields.ts","App.tsx","index.tsx"],"names":["FormSubject","this","Object","k","v","validate","_fields","subscribe","observerIndex","getErrors","setState","fields","key","notify","_observers","filter","o","observers","FormContext","createContext","FormProvider","props","value","children","formContextState","StrictForm","state","formSubject","handleSubmit","errors","e","componentDidUpdate","prevProps","render","onSubmit","Component","FormFields","validateSync","useErrors","keys","forceRender","s","latestErrors","useRef","useLayoutEffect","unsubscribe","form","type","cb","newErrors","newFilteredErrors","property","useErrorsWithSubject","useContext","useForm","useCallback","createSetFieldValue","LoginFields","IsNotEmpty","IsString","username","password","Login","setFieldValue","console","log","JSON","stringify","role","aria-label","name","id","onChange","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cf832a50.chunk.js","sourcesContent":["import { ValidationError } from 'class-validator'\nimport FormFields from './fields'\nimport { FormFieldKeys, FormFieldData } from '../../types'\n// import { FormFields } from \"./types\";\n\ntype FormObserverType = 'ERROR' | 'STATE'\n\ninterface FormObserver {\n  type: FormObserverType\n  // fields?: FormFieldKeysOrString<T>[];\n  cb: Function\n}\n\n// simplified observer pattern to notify components of internal form changes\n// i.e. errors returned from form validation\nexport default class FormSubject<T extends FormFields = any> {\n  // naming things is hard...\n  fields: FormFieldData<T>\n\n  private _fields: T\n  private _errors: ValidationError[]\n  private _observers: FormObserver[]\n\n  constructor(fields: T) {\n    // naming things is hard...\n    this._fields = fields\n    this.fields = {} as any\n\n    for (const [k, v] of Object.entries(fields)) {\n      if (typeof v !== 'function') {\n        this.fields[k] = v\n      }\n    }\n\n    this._errors = []\n    this._observers = []\n  }\n\n  validate(): ValidationError[] {\n    this._errors = this._fields.validate()\n\n    this.notify('ERROR')\n\n    return this._errors\n  }\n\n  subscribe(o: FormObserver) {\n    this._observers.push(o)\n\n    const unsubscribe = () => {\n      const observerIndex = this._observers.indexOf(o)\n      this._observers.splice(observerIndex, 1)\n    }\n\n    return unsubscribe\n  }\n\n  getErrors(): ValidationError[] {\n    return this._errors\n  }\n\n  setState<U extends FormFieldKeys<T>>(key: U, value: FormFieldData<T>[U]) {\n    if (this.fields[key] !== undefined) {\n      this.fields[key] = value\n      this._fields[key] = value\n    } else if (process.env.NODE_ENV !== 'production')\n      throw new Error(`\"${key}\" is an invalid key`)\n  }\n\n  private notify(type: FormObserverType) {\n    const observers = this._observers.filter((o) => o.type === type)\n\n    observers.forEach((o) => o.cb())\n  }\n}\n","import { createContext } from 'react'\n\nimport FormSubject from './subject'\n\nconst FormContext = createContext<FormSubject>(null!)\n\nexport default FormContext\n","import React, { FunctionComponent } from 'react'\nimport FormContext from './context'\nimport FormSubject from './subject'\n\nconst FormProvider: FunctionComponent<{ value: FormSubject }> = (props) => {\n  const { value, children } = props\n  const formContextState = value\n\n  return (\n    <FormContext.Provider value={formContextState}>\n      {children}\n    </FormContext.Provider>\n  )\n}\n\nexport default FormProvider\n","import React, { Component } from 'react'\n\nimport FormFields from './fields'\nimport FormSubject from './subject'\nimport { FormFieldData } from '../../types'\nimport FormProvider from './provider'\n\ninterface FormProps<T extends FormFields> {\n  fields: T\n  handleSubmit: (fields: FormFieldData<T>) => void\n}\n\ninterface FormState<T extends FormFields> {\n  formSubject: FormSubject<T>\n}\n\nexport default class StrictForm<T extends FormFields> extends Component<\n  FormProps<T>,\n  FormState<T>\n> {\n  state = {\n    formSubject: new FormSubject(this.props.fields)\n  }\n\n  handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    const errors = this.state.formSubject.validate()\n\n    if (errors.length === 0) {\n      this.props.handleSubmit(this.state.formSubject.fields)\n    }\n\n    e.preventDefault()\n  }\n\n  componentDidUpdate(prevProps: FormProps<T>) {\n    if (prevProps.fields !== this.props.fields) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        formSubject: new FormSubject(this.props.fields)\n      })\n    }\n  }\n\n  render() {\n    return (\n      <FormProvider value={this.state.formSubject}>\n        <form onSubmit={(e) => this.handleSubmit(e)}>\n          {this.props.children}\n        </form>\n      </FormProvider>\n    )\n  }\n}\n","import { validateSync, ValidationError } from 'class-validator'\n\nexport default class FormFields {\n  validate(): ValidationError[] {\n    return validateSync(this)\n  }\n}\n","import { useReducer, useRef, useLayoutEffect, useContext } from 'react'\nimport { ValidationError } from 'class-validator'\n\nimport FormContext from '../components/form/context'\nimport FormFields from '../components/form/fields'\nimport FormSubject from '../components/form/subject'\nimport { FormFieldKeysOrString } from '../types'\n\nfunction useErrorsWithSubject<T extends FormFields>(\n  form: FormSubject<T>,\n  keys: string[] = []\n): ValidationError[] {\n  const forceRender = useReducer((s) => s + 1, 0)[1] as () => void\n\n  const latestErrors = useRef<ValidationError[]>([])\n\n  const errors: ValidationError[] = latestErrors.current\n\n  // fires synchronously after DOM mutations after EVERY render\n  useLayoutEffect(() => {\n    latestErrors.current = errors\n  })\n\n  // fires synchronously after DOM mutations only when component is mounted\n  // ...or if / when the form dependency changes\n  useLayoutEffect(() => {\n    function checkForUpdates() {\n      const newErrors = form.getErrors()\n      const newFilteredErrors =\n        keys.length === 0\n          ? newErrors\n          : newErrors.filter(({ property }) => {\n              return keys.indexOf(property) !== -1\n            })\n\n      if (latestErrors.current.length === 0 && newFilteredErrors.length === 0) {\n        return\n      }\n\n      latestErrors.current = newFilteredErrors\n\n      forceRender()\n    }\n\n    const unsubscribe = form.subscribe({\n      type: 'ERROR',\n      cb: checkForUpdates\n    })\n\n    return () => unsubscribe()\n  }, [form])\n\n  return errors\n}\n\nfunction createErrorHook() {\n  function useErrors<T extends FormFields>(\n    keys?: FormFieldKeysOrString<T>[]\n  ): ValidationError[] {\n    const form = useContext<FormSubject>(FormContext)\n\n    return useErrorsWithSubject<T>(form, keys as string[])\n  }\n\n  return useErrors\n}\n\nconst useErrors = createErrorHook()\n\nexport default useErrors\n","import { useReducer, useContext, useCallback } from 'react'\n\nimport FormContext from '../components/form/context'\nimport FormFields from '../components/form/fields'\nimport FormSubject from '../components/form/subject'\nimport { FormFieldData, FormFieldKeys } from '../types'\n\n/* function isChangeEvent(\n  value: React.ChangeEvent<any> | any\n): value is React.ChangeEvent<any> {\n  return (value as React.ChangeEvent<any>).target !== undefined\n} */\n\nfunction createSetFieldValue<T extends FormFields>(form: FormSubject<T>) {\n  const forceRender = useReducer((s) => s + 1, 0)[1] as () => void\n\n  function setFieldValue<U extends FormFieldKeys<T>>(\n    key: U\n  ): (value: React.ChangeEvent<any>) => void\n  function setFieldValue<U extends FormFieldKeys<T>>(\n    key: U,\n    value?: FormFieldData<T>[U]\n  ): void\n  function setFieldValue<U extends FormFieldKeys<T>>(\n    key: U,\n    value?: FormFieldData<T>[U]\n  ): any {\n    if (value === undefined) {\n      return (value: React.ChangeEvent<any>) => {\n        form.setState(key, value.target.value)\n        forceRender()\n      }\n    }\n\n    form.setState(key, value)\n    forceRender()\n  }\n\n  return setFieldValue\n}\n\nexport default function useForm<T extends FormFields>() {\n  const form = useContext<FormSubject<T>>(FormContext)\n\n  if (form === undefined && process.env.NODE_ENV !== 'production')\n    throw new Error('useForm must be used within a FormProvider')\n\n  const formFields: FormFieldData<T> = form.fields as FormFieldData<T>\n\n  const setFieldValue = useCallback(createSetFieldValue(form), [form])\n\n  return [formFields, setFieldValue] as const\n}\n","import { FormFields } from 'react-strict-forms'\nimport { IsNotEmpty, IsString } from 'class-validator'\n\nexport class LoginFields extends FormFields {\n  @IsNotEmpty()\n  @IsString()\n  username: string\n\n  @IsNotEmpty()\n  @IsString()\n  password: string\n\n  constructor(username = '', password = '') {\n    super()\n    this.username = username\n    this.password = password\n  }\n}\n","import React, { FunctionComponent } from 'react'\n\nimport { StrictForm, useForm, useErrors } from 'react-strict-forms'\nimport { LoginFields } from './login.fields'\n\nconst Login: FunctionComponent = () => {\n  const [{ username, password }, setFieldValue] = useForm<LoginFields>()\n\n  const errors = useErrors()\n\n  console.log(JSON.stringify(errors, null, 2))\n\n  return (\n    <div>\n      React Strict Forms Example{' '}\n      <span role='img' aria-label='smiling emoji'>\n        😄\n      </span>\n      '\n      <input\n        type='text'\n        name='username'\n        id='username'\n        value={username}\n        onChange={setFieldValue('username')}\n      />\n      <input\n        type='password'\n        name='password'\n        id='password'\n        value={password}\n        onChange={setFieldValue('password')}\n      />\n      <input type='submit' value='Submit' />\n    </div>\n  )\n}\n\nconst App = () => {\n  console.log('rendering App...')\n\n  return (\n    <StrictForm\n      fields={new LoginFields('', '')}\n      handleSubmit={(fields) => console.log(fields)}\n    >\n      <Login />\n    </StrictForm>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}